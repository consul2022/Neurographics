"""bot neurography"""
from aiogram import Bot, Dispatcher, F
import asyncio

from aiogram.enums import ContentType
from aiogram.filters import Command
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, \
    CallbackQuery, LabeledPrice, PreCheckoutQuery
from dotenv import dotenv_values

config = dotenv_values(".env")
BOT_TOKEN = config["BOT_TOKEN"]
bot = Bot(BOT_TOKEN)
dp = Dispatcher()

#admin_id = 593849628
admin_id=1357975325
async def payment_process(price, name, description, chat_id):
    button = [[InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", pay=True)]]
    await bot.send_invoice(
        chat_id=chat_id,
        title=name,
        description=description,
        provider_token=config["PAY_TOKEN"],
        currency="RUB",
        # photo_url="https://i.ibb.co/448wWGc/avatar.png",
        # photo_width=640,
        # photo_height=640,
        # is_flexible=False,
        prices=[LabeledPrice(label="–¶–µ–Ω–∞", amount=round(price * 100,2))],
        start_parameter="time-machine-example",
        payload=name,
        need_name=True,
        #need_email=True,
        need_phone_number=True,
        send_email_to_provider=True,
        # provider_data={
        #     "receipt": {
        #         "items": [
        #             {
        #                 "description": "—Ç–æ–≤–∞—Ä ",
        #                 "quantity": "1.00",
        #                 "amount": {
        #                     "value": str(price),
        #                     "currency": "RUB",
        #                 },
        #                 "vat_code": 2,
        #             }
        #         ]
        #     }
        # },
        reply_markup=InlineKeyboardMarkup(inline_keyboard=button)
    )

@dp.message(Command("start"))
async def start(message: Message):
    button = [[KeyboardButton(text="–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç ü§î")]]
    buttons = ReplyKeyboardMarkup(keyboard=button, resize_keyboard=True)
    await message.answer(text=f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è,{message.chat.first_name}, –Ω–∞ –º–æ–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.", reply_markup=buttons)

@dp.message(F.text=="–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç ü§î")
async def menu(message: Message):
    button = [[KeyboardButton(text="–í–∫–æ–Ω—Ç–∞–∫—Ç–µ"),KeyboardButton(text="–¢–∞—Ä–∏—Ñ—ã")],[KeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∫ –°–≤–µ—Ç–ª–∞–Ω–µ")]]
    buttons = ReplyKeyboardMarkup(keyboard=button, resize_keyboard=True)
    await message.answer(text="–í –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –∫—É—Ä—Å—ã –ù–µ–π—Ä–æ–≥—Ä–∞—Ñ–∏–≥–∏", reply_markup=buttons)

@dp.message(F.text=="–í–∫–æ–Ω—Ç–∞–∫—Ç–µ")
async def vk(message: Message):
    button = [[InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É –í–ö", url="https://vk.com/svetlana_guru")]]
    buttons = InlineKeyboardMarkup(inline_keyboard=button)
    await message.answer(text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É –í–ö",reply_markup=buttons)

@dp.message(F.text=="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∫ –°–≤–µ—Ç–ª–∞–Ω–µ")
async def consultation(message: Message):
    button = [[InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/Aronsveta7")]]
    buttons = InlineKeyboardMarkup(inline_keyboard=button)
    await message.answer(text="–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å–æ –°–≤–µ—Ç–ª–∞–Ω–æ–π", reply_markup=buttons)

@dp.message(F.text=="–¢–∞—Ä–∏—Ñ—ã")
async def tarifs(message: Message):
    button = [[InlineKeyboardButton(text="–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ", callback_data="pay|acquaintance"),InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 3 –º–µ—Å—è—Ü–∞", callback_data="pay|subscription")]]
    buttons = InlineKeyboardMarkup(inline_keyboard=button)
    await message.answer(text="–¢–∞—Ä–∏—Ñ—ã", reply_markup=buttons)


@dp.callback_query()
async def pay(callback: CallbackQuery):
    data = callback.data.split("|")
    if data[0] == "pay":
        if data[1] == "acquaintance":
            await payment_process(990,"–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ","4 –æ–Ω–ª–∞–π–Ω —É—Ä–æ–∫–∞ –ø–æ –ù–µ–π—Ä–æ–≥—Ä–∞—Ñ–∏–∫–∏ + –º–µ–¥–∏—Ç–∞—Ü–∏–∏",callback.message.chat.id)
        elif data[1] == "subscription":
            await payment_process(3300,"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 3 –º–µ—Å—è—Ü–∞","12 —É—Ä–æ–∫–æ–≤ + –º–µ–¥–∏—Ç–∞—Ü–∏–∏ + –ø—Ä–∞–∫—Ç–∏–∫–∏ —Å –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º",callback.message.chat.id)


@dp.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    await pre_checkout_query.answer(ok=True)


@dp.message(
    lambda message: message.content_type
                    in {ContentType.SUCCESSFUL_PAYMENT}
)
async def got_payment(message: Message):
    data = message.successful_payment.invoice_payload
    await message.answer(f"–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ \"{data}\".–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –°–≤–µ—Ç–ª–∞–Ω–∞ —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è")
    if message.chat.username is not None:
        await bot.send_message(chat_id=admin_id, text=f"@{message.chat.username} –æ—Ñ–æ—Ä–º–∏–ª(–∞) \"{data}\"")
    else:
        await bot.send_message(chat_id=admin_id, text=f"tg://user?id={message.chat.id} –æ—Ñ–æ—Ä–º–∏–ª(–∞) \"{data}\"")






async def main():
    await dp.start_polling(bot)
asyncio.run(main())